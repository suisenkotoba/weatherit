// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	events "weatherit/usecases/events"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, eventId, userId
func (_m *Repository) Delete(ctx context.Context, eventId int, userId int) error {
	ret := _m.Called(ctx, eventId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, eventId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, userId
func (_m *Repository) Find(ctx context.Context, userId int) ([]events.Domain, error) {
	ret := _m.Called(ctx, userId)

	var r0 []events.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) []events.Domain); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]events.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByDate provides a mock function with given fields: ctx, from, to
func (_m *Repository) FindAllByDate(ctx context.Context, from time.Time, to time.Time) ([]events.Domain, error) {
	ret := _m.Called(ctx, from, to)

	var r0 []events.Domain
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []events.Domain); ok {
		r0 = rf(ctx, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]events.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByDate provides a mock function with given fields: ctx, userId, from, to
func (_m *Repository) FindByDate(ctx context.Context, userId int, from time.Time, to time.Time) ([]events.Domain, error) {
	ret := _m.Called(ctx, userId, from, to)

	var r0 []events.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int, time.Time, time.Time) []events.Domain); ok {
		r0 = rf(ctx, userId, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]events.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, time.Time, time.Time) error); ok {
		r1 = rf(ctx, userId, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, newEvent
func (_m *Repository) Store(ctx context.Context, newEvent *events.Domain) (int, error) {
	ret := _m.Called(ctx, newEvent)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *events.Domain) int); ok {
		r0 = rf(ctx, newEvent)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *events.Domain) error); ok {
		r1 = rf(ctx, newEvent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, event
func (_m *Repository) Update(ctx context.Context, event *events.Domain) (int, error) {
	ret := _m.Called(ctx, event)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *events.Domain) int); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *events.Domain) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
