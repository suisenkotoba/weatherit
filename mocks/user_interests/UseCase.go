// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	user_interests "weatherit/usecases/user_interests"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// GetUserInterest provides a mock function with given fields: ctx, userId
func (_m *UseCase) GetUserInterest(ctx context.Context, userId int) []user_interests.Domain {
	ret := _m.Called(ctx, userId)

	var r0 []user_interests.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) []user_interests.Domain); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user_interests.Domain)
		}
	}

	return r0
}

// GetUserInterestIDs provides a mock function with given fields: ctx, userId
func (_m *UseCase) GetUserInterestIDs(ctx context.Context, userId int) []int {
	ret := _m.Called(ctx, userId)

	var r0 []int
	if rf, ok := ret.Get(0).(func(context.Context, int) []int); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	return r0
}

// SetUserInterest provides a mock function with given fields: ctx, userId, interestIDs
func (_m *UseCase) SetUserInterest(ctx context.Context, userId int, interestIDs []int) error {
	ret := _m.Called(ctx, userId, interestIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []int) error); ok {
		r0 = rf(ctx, userId, interestIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
